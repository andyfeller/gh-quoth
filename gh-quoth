#!/usr/bin/env bash
set -e

# Arguments: {<number> | <url>}
# Flags:
# -R,--repo [HOST/]OWNER/REPO
# -t,--target-repo [HOST/]OWNER/REPO

SOURCE_ISSUE_VIEW_ARGS=()
TARGET_ISSUE_CREATE_ARGS=()
TARGET_REPO=

__USAGE="
Create an issue for discussion based upon another.

USAGE
  gh quoth [flags] {<number> | <url>}

FLAGS
  -d, --debug                          Enable debug logging
  -h, --help                           Displays help usage
  -R, --repo=[HOST/]OWNER/REPO         Select another repository for sourcing issue to quoth
  -T, --target-repo=[HOST/]OWNER/REPO  Select another repository for creating issue
";

die() {
	printf "\nError: %s\n" "$1"
	echo "$__USAGE"
	exit 1
}

if ! type -p gh > /dev/null; then
	die "'gh' could not be found"
fi

while getopts "dhR:T:-:" OPT; do
	if [ "$OPT" = "-" ]; then     # long option: reformulate OPT and OPTARG
		OPT="${OPTARG%%=*}"       # extract long option name
		OPTARG="${OPTARG#"$OPT"}" # extract long option argument (may be empty)
		OPTARG="${OPTARG#=}"      # if long option argument, remove assigning `=`
	fi

	case "$OPT" in
		debug | d)
			set -x
			DEBUG=true
			;;

		help | h)
			echo "$__USAGE"
			exit 0
			;;

		repo | R)
			SOURCE_ISSUE_VIEW_ARGS+=(--repo "${OPTARG}")
			;;

		target-repo | T)
			TARGET_ISSUE_CREATE_ARGS+=(--repo "${OPTARG}")
			TARGET_ISSUE_REPO="$OPTARG"
			;;

		*)
			die "Unknown flag '$OPT'"
			;;
	esac
done

# shift so that $@, $1, etc. refer to the non-option arguments
shift "$((OPTIND-1))"


if ! test "$#" -eq 1; then
  die "Must provide issue number or url"
fi

# Lookup information about the source issue
SOURCE_ISSUE_JSON="$(gh issue view "$1" "${SOURCE_ISSUE_VIEW_ARGS[@]}" --json body,createdAt,title,url --jq '. | @base64')"

_jq() {
    echo "$SOURCE_ISSUE_JSON" | base64 --decode | jq -r "${1}"
}

BODY="$(_jq '.body')"
CREATED="$(_jq '.createdAt')"
LINK="$(_jq '.url')"
TITLE="$(_jq '.title')"

# Markdown quote source body by replacing newlines for newlines and markdown quoting
BODY="${BODY//$'\n'/$'\n'> }"
BODY="$(cat << EOF
**Title:** $TITLE
**Issue:** $LINK
**Created:** $CREATED

---

> $BODY
EOF
)"

# Confirm details before creating issue
cat << EOF
Target repo: $TARGET_ISSUE_REPO
Issue body:

$BODY

EOF

read -r -p "Create this issue? [Y/N]: " CONFIRMATION

if [ "$CONFIRMATION" != "y" ] && [ "$CONFIRMATION" != "Y" ] && [ "$CONFIRMATION" != "yes" ]; then
	printf "\nExit due to confirmation\n"
	exit 0
fi

# Create issue using dynamically constructed body within heredoc
echo "$BODY" | gh issue create --title "Follow up \"$TITLE\"" --body-file - "${TARGET_ISSUE_CREATE_ARGS[@]}"